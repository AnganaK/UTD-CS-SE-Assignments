using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.Xna.Framework;

namespace HuntTheWumpus3
{
    // A camera class that handles the matrix math stuff and easing between two camera positions
    class Camera
    {
        // Speed of easing between camera angles/positions
        private const float EASE_FACTOR = .05f;

        // Main matrices generated by this camera
        public Matrix view;
        public Matrix perspective;

        // Actual camera vectors used when rendering
        public Vector3 cameraPosition;
        public Vector3 cameraDirection;
        public Vector3 cameraUp;

        // The camera vectors we want to ease to
        public Vector3 desiredPosition;
        public Vector3 desiredDirection;
        public Vector3 desiredUp;

        public Camera(Game game, Vector3 pos, Vector3 target, Vector3 up)
        {
            // Build camera view matrix
            cameraPosition = pos;
            cameraDirection = target - pos;
            cameraDirection.Normalize();
            cameraUp = up;
            CreateLookAt();
            perspective = Matrix.CreatePerspectiveFieldOfView(MathHelper.ToRadians(60), 1000 / 480, 0.1f, 3000f);
        }

        // updates view matrix
        private void CreateLookAt()
        {
            view = Matrix.CreateLookAt(cameraPosition,
                cameraPosition + cameraDirection, cameraUp);
        }

        public void update(Vector3 desiredPosition, Vector3 desiredTarget)
        {
            // update desired vectors
            this.desiredPosition = desiredPosition;
            this.desiredDirection = desiredTarget - desiredPosition;
            desiredDirection.Normalize();
            this.desiredUp = desiredUp;

            // ease position towards desired
            Vector3 positionDiff = desiredPosition - cameraPosition;
            if (positionDiff.Length() > .01f)
            {
                cameraPosition += positionDiff * EASE_FACTOR;
            }
            else
                cameraPosition = new Vector3(desiredPosition.X, desiredPosition.Y, desiredPosition.Z);

            // ease direction towards desired
            Vector3 dirDiff = desiredDirection - cameraDirection;
            if (dirDiff.Length() > .01f)
            {
                cameraDirection += dirDiff * EASE_FACTOR;
            }
            else
                cameraDirection = new Vector3(desiredDirection.X, desiredDirection.Y, desiredDirection.Z);

            // Derive up vector from the other two
            cameraUp = new Vector3(cameraPosition.X, cameraPosition.Y, 99999999999);

            // update view matrix
            CreateLookAt();
        }
    }
}
